name: Build GA4-patched Streamlit wheel

on:
  workflow_dispatch: {}
  schedule:
    - cron: "0 4 * * 1"  # every Monday 04:00 UTC

permissions:
  contents: write

jobs:
  build-patch:
    runs-on: ubuntu-latest
    env:
      GA4_ID: G-M1PJP8JM1T
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Build patched wheel + update requirements
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY'
          import json, urllib.request, os, sys, pathlib, subprocess, shutil

          repo = pathlib.Path.cwd()

          # 1) Find latest Streamlit on PyPI
          data = json.load(urllib.request.urlopen("https://pypi.org/pypi/streamlit/json"))
          ver = data["info"]["version"]
          print("LATEST STREAMLIT =", ver)

          wheelhouse = repo / "build"
          wheelhouse.mkdir(parents=True, exist_ok=True)
          subprocess.check_call([sys.executable, "-m", "pip", "download",
                                 "--only-binary=:all:", "--no-deps",
                                 f"streamlit=={ver}", "-d", str(wheelhouse)])
          whl = next(wheelhouse.glob("streamlit-*.whl"))

          # 2) Unpack using 'wheel'
          subprocess.check_call([sys.executable, "-m", "pip", "install", "wheel"])
          unpack_dir = repo / "build" / "unpacked"
          if unpack_dir.exists():
              shutil.rmtree(unpack_dir)
          unpack_dir.mkdir(parents=True, exist_ok=True)
          subprocess.check_call([sys.executable, "-m", "wheel", "unpack", str(whl)], cwd=unpack_dir)
          [pkg_dir] = list(unpack_dir.glob("streamlit-*"))

          # 3) Inject GA4 <script> into <head> of streamlit/static/index.html
          idx = pkg_dir / "streamlit" / "static" / "index.html"
          html = idx.read_text(encoding="utf-8")
          ga = os.environ.get("GA4_ID", "").strip()
          if not ga:
              print("ERROR: GA4_ID secret is empty.", file=sys.stderr); sys.exit(1)

          snippet = f"""
          <!-- Google tag (gtag.js) -->
          <script async src="https://www.googletagmanager.com/gtag/js?id={ga}"></script>
          <script>
            window.dataLayer = window.dataLayer || [];
            function gtag(){dataLayer.push(arguments);}
            gtag('js', new Date());

            gtag('config', '{ga}');
          </script>
          """.strip() + "\n"

          if ga not in html:
              html = html.replace("<head>", "<head>\n" + snippet, 1)
              idx.write_text(html, encoding="utf-8")
              print("Injected GA4 into index.html")

          # 4) Repack (regenerates RECORD)
          dist = repo / "build" / "dist"; dist.mkdir(exist_ok=True)
          subprocess.check_call([sys.executable, "-m", "wheel", "pack", str(pkg_dir), "-d", str(dist)])
          patched = next(dist.glob("streamlit-*.whl"))

          # 5) Save as a stable filename in repo root
          final = repo / "streamlit-patched.whl"
          if final.exists(): final.unlink()
          shutil.copy2(patched, final)

          # 6) Ensure requirements.txt installs our wheel first
          req = repo / "requirements.txt"
          existing = req.read_text(encoding="utf-8") if req.exists() else ""
          lines = [l for l in existing.splitlines() if not l.strip().endswith("streamlit-patched.whl")]
          lines.insert(0, "./streamlit-patched.whl")
          req.write_text("\n".join(lines).rstrip() + "\n", encoding="utf-8")

          # Optional version marker
          (repo / ".ga4-streamlit-version").write_text(ver, encoding="utf-8")
          print("Patched wheel built for", ver)
          PY

      - name: Commit wheel and requirements
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: GA4 patch Streamlit to latest"
          file_pattern: "streamlit-patched.whl requirements.txt .ga4-streamlit-version"
